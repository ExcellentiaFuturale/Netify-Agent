# Debian build
#-------------

.debian_build:
  stage: build
  tags:
    - docker
  image: $OS_IMAGE
  before_script:
    # Manually pull in submodules, the GIT_SUBMODULE_STRATEGY variable in GitLab is quirky
    - apt update
    - apt install -y git
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    # Build environment
    - apt update
    - apt install -y rsync debhelper dh-systemd autoconf automake bc build-essential libcurl4-openssl-dev libmnl-dev libncurses5-dev libnetfilter-conntrack-dev libpcap-dev libtool zlib1g-dev libgoogle-perftools-dev
    # Build packages
    - ./autogen.sh
    - ./configure --prefix=/usr --includedir=\${prefix}/include --mandir=\${prefix}/share/man --sysconfdir=/etc --localstatedir=/var
    - echo "to be continued?"

.debian11_build:
  stage: build
  tags:
    - debian11
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive --force
  script:
    - ./autogen.sh
    - ./configure --prefix=/usr --includedir=\${prefix}/include --mandir=\${prefix}/share/man --sysconfdir=/etc --localstatedir=/var
    - make clean
    - make DESTDIR=/tmp/netify-agent install

# RPM build
#----------

.rpmos_build:
  stage: build
  tags:
    - docker
  image: $RPMOS_IMAGE
  before_script:
    # Manually pull in submodules, the GIT_SUBMODULE_STRATEGY variable in GitLab is quirky
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    # Build via raw source only
    - grep ^Version netifyd.spec | sed 's/.*[[:space:]]//' > /tmp/version
    - tar --exclude=.git --transform "s,^,netifyd-`cat /tmp/version`/," -czf netifyd-`cat /tmp/version`.tar.gz *
    # Build packages
    - mkdir -p result builds/$CI_PROJECT_NAME/$RPMOS_OS/$RPMOS_VERSION/$RPMOS_ARCH logs/$RPMOS_OS/$RPMOS_VERSION/$RPMOS_ARCH
    - rpmbuild -bs netifyd.spec --define "_sourcedir $PWD" --define "_srcrpmdir $PWD"
    - mock -v --old-chroot --resultdir=result *.src.rpm
    # Copy packages and logs to artifacts
    - grep -v DEBUG result/root.log
    - mv result/*rpm builds/$CI_PROJECT_NAME/$RPMOS_OS/$RPMOS_VERSION/$RPMOS_ARCH/
    - mv result/*log logs/$RPMOS_OS/$RPMOS_VERSION/$RPMOS_ARCH/
    - rm -rf result
    # Push build to master node
    - sudo yum -y install rsync
    - rsync -rtv builds/* master-mirror.egloo.ca::netify-builds/
  allow_failure: true
  artifacts:
    when: always
    paths:
    - builds
    - logs
    expire_in: 1 day

# FreeBSD Build
#--------------

.xbsd_build:
  stage: build
  before_script:
    # Manually pull in submodules, the GIT_SUBMODULE_STRATEGY variable in GitLab is quirky
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    # Build environment
    - ntpdate -d -u time.nist.gov
    - ntpdate -u time.nist.gov
    # Build packages
    - ./autogen.sh
    - ./configure --disable-conntrack --disable-inotify $OS_CONFIGURE_FLAGS CC=clang CXX=clang++ MAKE=gmake
    - mkdir -p /usr/ports/distfiles
    - gmake $OS_MAKE_TARGET
    - gmake deploy-pfsense
    # Push build to master mirror
    - mkdir -p builds/$CI_PROJECT_NAME/$OS_BASENAME/$OS_VERSION.$OS_RELEASE/$OS_ARCH/
    - mv deploy/$OS_BASENAME/work/pkg/*.$OS_PKG_EXTENSION builds/$CI_PROJECT_NAME/$OS_BASENAME/$OS_VERSION.$OS_RELEASE/$OS_ARCH/
    - mv deploy/pfsense/work/pkg/*.$OS_PKG_EXTENSION builds/$CI_PROJECT_NAME/$OS_BASENAME/$OS_VERSION.$OS_RELEASE/$OS_ARCH/
    - rsync -rtv builds/* master-mirror.egloo.ca::netify-builds/
  allow_failure: true

