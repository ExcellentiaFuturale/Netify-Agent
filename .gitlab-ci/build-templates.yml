# Debian build
#-------------

.debian_build:
  stage: build
  image: $OS_IMAGE
  before_script:
    # Manually pull in submodules, the GIT_SUBMODULE_STRATEGY variable in GitLab is quirky
    - apt update
    - env DEBIAN_FRONTEND=noninteractive apt install -y git
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - find . -name '\.git*' -print0 | xargs -0 rm -rf
  script:
    # Build environment
    - apt update
    - env DEBIAN_FRONTEND=noninteractive apt install -y rsync debhelper autoconf automake bc bison build-essential flex libtool wget pkg-config git
    - env DEBIAN_FRONTEND=noninteractive apt install -y libcurl4-openssl-dev libmnl-dev libncurses5-dev libnetfilter-conntrack-dev libpcap-dev libgoogle-perftools-dev libtool zlib1g-dev systemd $OS_EXTRA_PACKAGES
    # Build packages
    - ./autogen.sh
    - ./configure --prefix=/usr --includedir=\${prefix}/include --mandir=\${prefix}/share/man --sysconfdir=/etc --localstatedir=/var
    - make -C deploy/debian
    - mkdir -p debian/
    - cp deploy/debian/* debian/
    - dpkg-buildpackage -jauto
    # Copy packages to mirror
    - mkdir -p builds/netify/$OS_NAME/$OS_VERSION-devel/$OS_ARCH
    - mkdir -p builds/netify/$OS_NAME/$OS_VERSION-devel/source
    - mv -v ../*.deb builds/netify/$OS_NAME/$OS_VERSION-devel/$OS_ARCH/
    - mv -v ../*.buildinfo builds/netify/$OS_NAME/$OS_VERSION-devel/$OS_ARCH/
    - mv -v ../*.changes builds/netify/$OS_NAME/$OS_VERSION-devel/$OS_ARCH/
    - mv -v ../*.dsc builds/netify/$OS_NAME/$OS_VERSION-devel/source/
    - mv -v ../*.tar.gz builds/netify/$OS_NAME/$OS_VERSION-devel/source/
    # Push build to master node
    - if [ -n "$CI_COMMIT_TAG" ]; then rsync -rtv builds/* master-mirror.netify-backend.gcp::netify/; fi
  artifacts:
    when: always
    paths:
    - builds
    expire_in: 1 day

# RPM build
#----------

.rpmos_build:
  stage: build
  image: $RPMOS_IMAGE
  before_script:
    # Manually pull in submodules, the GIT_SUBMODULE_STRATEGY variable in GitLab is quirky
    - yum install -y git findutils
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - find . -name '\.git*' -print0 | xargs -0 rm -rf
  script:
    # Build environment
    - yum -y install wget
    - wget --no-check-certificate https://dl.fedoraproject.org/pub/epel/epel-release-latest-${RPMOS_VERSION}.noarch.rpm
    - yum -y install epel-release-latest-${RPMOS_VERSION}.noarch.rpm
    - yum -y install make rpm-build which expect yum-utils sudo autoconf gcc gcc-c++ automake libtool rsync bc git
    - yum -y install $RPMOS_REPOS curl-devel libmnl-devel libnetfilter_conntrack-devel libpcap-devel zlib-devel
    # Build packages
    - ./autogen.sh
    - ./configure --prefix=/usr --includedir=\${prefix}/include --mandir=\${prefix}/share/man --sysconfdir=/etc --localstatedir=/var
    - make -C deploy/rpm
    - grep ^Version deploy/rpm/netifyd.spec | sed 's/.*[[:space:]]//' > /tmp/version
    - tar --exclude=.git --transform "s,^,netifyd-`cat /tmp/version`/," -czf netifyd-`cat /tmp/version`.tar.gz *
    - echo "%dist .os${RPMOS_VERSION}" > ~/.rpmmacros
    - rpmbuild -bs deploy/rpm/netifyd.spec  --define "_sourcedir $PWD" --define "_srcrpmdir $PWD"
    - rpmbuild --rebuild *.src.rpm
    # Copy artifacts (packages) to mirror
    - mkdir -p builds/netify/$RPMOS_OS/$RPMOS_VERSION/devel/$RPMOS_ARCH
    - mkdir -p builds/netify/$RPMOS_OS/$RPMOS_VERSION/devel/source
    - cp -v ~/rpmbuild/RPMS/$RPMOS_ARCH/*.rpm builds/netify/$RPMOS_OS/$RPMOS_VERSION/devel/$RPMOS_ARCH/
    - cp -v *.src.rpm builds/netify/$RPMOS_OS/$RPMOS_VERSION/devel/source/
    # Push build to master node
    - if [ -n "$CI_COMMIT_TAG" ]; then rsync -rtv builds/* master-mirror.netify-backend.gcp::netify/; fi
  artifacts:
    when: always
    paths:
    - builds
    expire_in: 1 day

# OpenWrt build
#--------------

.openwrt_build:
  stage: build
  image: $OS_IMAGE
  before_script:
    # Manually pull in submodules, the GIT_SUBMODULE_STRATEGY variable in GitLab is quirky
    - apt update
    - env DEBIAN_FRONTEND=noninteractive apt install -y git
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - find . -name '\.git*' -print0 | xargs -0 rm -rf
  script:
    # Build environment
    - apt update
    - env DEBIAN_FRONTEND=noninteractive apt install -y rsync autoconf automake bc bison build-essential flex libtool wget pkg-config git
    - env DEBIAN_FRONTEND=noninteractive apt install -y libcurl4-openssl-dev libmnl-dev libncurses5-dev libnetfilter-conntrack-dev libpcap-dev libgoogle-perftools-dev libtool zlib1g-dev systemd $OS_EXTRA_PACKAGES
    - env DEBIAN_FRONTEND=noninteractive apt install -y $OPENWRT_PACKAGES
    - git clone https://github.com/openwrt/openwrt --depth 1 --branch $OPENWRT_BRANCH
    - ./autogen.sh
    - ./configure --prefix=/usr --includedir=\${prefix}/include --mandir=\${prefix}/share/man --sysconfdir=/etc --localstatedir=/var
    - cp openwrt/feeds.conf.default openwrt/feeds.conf
    - mkdir -p openwrt-feed/net openwrt-feed/libs
    - ln -s $(pwd)/deploy/openwrt $(pwd)/openwrt-feed/net/netifyd
    - echo "src-link netify $(pwd)/openwrt-feed" >> openwrt/feeds.conf
    - (cd openwrt; ./scripts/feeds update -a)
    - (cd openwrt; ./scripts/feeds install -a)
    - (cd openwrt; ./scripts/feeds uninstall netifyd)
    - (cd openwrt; ./scripts/feeds install -p netify -d m netifyd)
    - make -C openwrt defconfig
  artifacts:
    when: always
    paths:
    - builds
    expire_in: 1 day
