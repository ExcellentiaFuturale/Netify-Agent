# Netify Agent
# Copyright (C) 2016-2018 eGloo, Incorporated
#
# This is free software, licensed under the GNU General Public License v3.

include $(TOPDIR)/rules.mk

# Name, version and release number
# The name and version of your package are used to define the variable to point to the build directory of your package: $(PKG_BUILD_DIR)
PKG_NAME:=@PACKAGE_TARNAME@
PKG_VERSION:=@PACKAGE_VERSION@
PKG_RELEASE:=1

PKG_INSTALL:=1
#PKG_FIXUP:=autoreconf
PKG_BUILD_PARALLEL:=1
PKG_LICENSE:=GPL-3.0

# Source settings (i.e. where to find the source codes)
# This is a custom variable, used below
SOURCE_DIR:=/home/dsokoloski/netify-daemon/openwrt

include $(INCLUDE_DIR)/package.mk

# Package definition; instructs on how and where our package will appear in the overall configuration menu ('make menuconfig')
define Package/@PACKAGE_TARNAME@
  SECTION:=net
  CATEGORY:=Network
  TITLE:=Netify Agent
  URL:=http://www.netify.ai/
  MENU:=1
  PROVIDES:=@PACKAGE_TARNAME@
endef

# Package description; a more verbose description on what our package does
define Package/@PACKAGE_TARNAME@/description
Netify provides visibility into the traffic on your network along with the option to take an active role (on supported devices) in stopping/shaping undesirable traffic from recurring on your network.
endef

# Package configuration files
define Package/dnsmasq/conffiles
/etc/config/@PACKAGE_TARNAME@
/etc/@PACKAGE_TARNAME@.conf
endef

# Compiler, linker, and make options
COPTS =

TARGET_CFLAGS += -ffunction-sections -fdata-sections
TARGET_LDFLAGS += -Wl,--gc-sections

define Build/Configure
	$(call Build/Configure/Default, \
        --disable-inotify \
		--disable-systemd \
	)
endif

# Package preparation instructions; create the build directory and copy the source code. 
# The last command is necessary to ensure our preparation instructions remain compatible with the patching system.
define Build/Prepare
        mkdir -p $(PKG_BUILD_DIR)
        cp $(SOURCE_DIR)/* $(PKG_BUILD_DIR)
        $(Build/Patch)
endef

# Package build instructions; invoke the target-specific compiler to first compile the source file, and then to link the file into the final executable
define Build/Compile
        $(TARGET_CC) $(TARGET_CFLAGS) -o $(PKG_BUILD_DIR)/@PACKAGE_TARNAME@.o -c $(PKG_BUILD_DIR)/@PACKAGE_TARNAME@.c
        $(TARGET_CC) $(TARGET_LDFLAGS) -o $(PKG_BUILD_DIR)/$1 $(PKG_BUILD_DIR)/@PACKAGE_TARNAME@.o
endef

# Package install instructions; create a directory inside the package to hold our executable, and then copy the executable we built previously into the folder
define Package/@PACKAGE_TARNAME@/install
        $(INSTALL_DIR) $(1)/usr/bin
        $(INSTALL_BIN) $(PKG_BUILD_DIR)/@PACKAGE_TARNAME@ $(1)/usr/bin
endef

# This command is always the last, it uses the definitions and variables we give above in order to get the job done
$(eval $(call BuildPackage,@PACKAGE_TARNAME@))
